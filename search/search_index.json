{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Roblox Requests Roblox Requests brings user-friendly HTTP to Roblox with no need for the manual labor of HttpService. An example of what you can do with Requests: local http = require ( game . ReplicatedStorage . http ) local r = http . post ( \"https://httpbin.org/post\" , { query = { arg = \"value\" }, data = { this = \"json\" } }) print ( r . content_type , r : json (). url ) -- output: -- application/json -- https://httpbin.org/post?arg=value See similar code with HttpService. Requests' powerful API allows you to send HTTP/1.1 requests without the need of manual labor. You'll never have to add query strings to URLs or encode your POST data again. Roblox Requests Features Sessions with cookie persistence, base URLs/headers/query Automatic query string building Automatic JSON body encoding Elegant response structure with builtin JSON decoding Domain based Key/Value cookies Multipart form building including file encoding and upload Roblox Requests was inspired by the well known Python Requests library. Feel free to contribute new features on the library's GitHub . In this documentation you'll find step-by-step instructions to get the most out of Roblox Requests.","title":"Home"},{"location":"#roblox-requests","text":"Roblox Requests brings user-friendly HTTP to Roblox with no need for the manual labor of HttpService. An example of what you can do with Requests: local http = require ( game . ReplicatedStorage . http ) local r = http . post ( \"https://httpbin.org/post\" , { query = { arg = \"value\" }, data = { this = \"json\" } }) print ( r . content_type , r : json (). url ) -- output: -- application/json -- https://httpbin.org/post?arg=value See similar code with HttpService. Requests' powerful API allows you to send HTTP/1.1 requests without the need of manual labor. You'll never have to add query strings to URLs or encode your POST data again.","title":"Roblox Requests"},{"location":"#roblox-requests-features","text":"Sessions with cookie persistence, base URLs/headers/query Automatic query string building Automatic JSON body encoding Elegant response structure with builtin JSON decoding Domain based Key/Value cookies Multipart form building including file encoding and upload Roblox Requests was inspired by the well known Python Requests library. Feel free to contribute new features on the library's GitHub . In this documentation you'll find step-by-step instructions to get the most out of Roblox Requests.","title":"Roblox Requests Features"},{"location":"api-reference/","text":"API Reference Module Level http.send http.send(method, url, [options]) -> Response Creates and sends an HTTP request with the given method, URL, and options. Accepted options: Name Type Description headers dictionary Headers to be used with the Request. query dictionary Query string parameters to add to the URL. data string OR table OR FormData Data to send in the body of the request. Tables will automatically be encoded as JSON. cookies dictionary OR CookieJar Cookies to send with request. http.get, post, head, put, delete, patch, options http.get(url, [options]) -> Response Shortcut methods for http.send . http.Request http.Request(method, url, [options]) -> Request Creates and prepares a Request object. Attributes Note: These attributes are all read-only. Use the provided methods instead of setting them directly. method (string) - HTTP verb used for request url (string) - URL request is sent to headers (dictionary) - Headers used for this request query (dictionary) - Parameters to add to URL data (string) - Raw data sent with request Request:update_headers Request:update_headers(headers) Updates request headers based on a dictionary of new headers. Request:update_query Request:update_query(params) Updates URL query string based on a dictionary of parameters. Request:set_data Request:set_data(data) Sets new data for request. The data can be a string, table (JSON), or FormData. Request:send Request:send() -> Response Sends the request and returns a Response object. Request:send(cb) Sends request and passes the response to a callback function. This will not block the current thread. Response Attributes request (Request) - Request that generated this response url (string) - Requests' URL method (string) - Request's HTTP method success (bool) - true if response was successful code (number) - Status code of reponse message (string) - Status message of response headers (dictionary) - Headers sent in response content (string) - Response body cookies (CookieJar) - New cookies sent in this response Response:json Response:json() -> Variant Converts JSON response to a Lua object. http.Session http.Session([base_url]) -> Session Creates a session with an optional base URL. All main module methods also apply to sessions. Attributes headers (dictionary) - Default headers used with each request cookies (CookieJar) - Current session cookies. Updates automatically from Set-Cookie header base_url (string) - Base URL to prefix each request with. If a request UTL contains the HTTP protocol (\"http(s)://\"), this will be ignored Session:set_headers Session:set_headers(new_headers) Updates headers dictionary with values of new_headers. Session:send Session:send(method, url, [opts]) -> Response Creates and sends a request prepared with session defaults. Options specified here will override the session values. Session:get, post, head, put, delete, patch, options Session:get(url, [opts]) -> Response Shortcut methods for Session:send Session:Request Session:Request(method, url, [opts]) -> Request Creates a Request prepared with session defaults. Options specified here will override the session values. http.FormData http.FormData([{fieldName, fieldValue}, [...]]) -> FormData Creates form data based on given fields. Field names cannot contain '=' or '&' characters. FormData:AddField FormData:AddField(name, value) Adds field with given name and value. FormData:AddFile FormData:AddFile(fieldName, fileContent, [fileName, [contentType]]) Adds a file to the form with optional file name and content type. Content type must be specified if not text/plain . Any non-text files will be encoded using Base64. http.CookieJar http.CookieJar() -> CookieJar Creates a CookieJar object. When cookies are added for a URL, its hostname is taken and used as the domain for that cookie (this is being reworked in the future). Attributes domains (dictionary) - Table containing cookies for each domain CookieJar:set CookieJar:set(url, name, value) Creates a new cookie under the specified URL CookieJar:set(url, cookie_table) Adds multiple cookies to the specified URL. Table should be in the format {name=\"value\"} . CookieJar:delete CookieJar:delete(url, name) Deletes a cookie from the specified domain.","title":"API Reference"},{"location":"api-reference/#api-reference","text":"","title":"API Reference"},{"location":"api-reference/#module-level","text":"","title":"Module Level"},{"location":"api-reference/#httpsend","text":"http.send(method, url, [options]) -> Response Creates and sends an HTTP request with the given method, URL, and options. Accepted options: Name Type Description headers dictionary Headers to be used with the Request. query dictionary Query string parameters to add to the URL. data string OR table OR FormData Data to send in the body of the request. Tables will automatically be encoded as JSON. cookies dictionary OR CookieJar Cookies to send with request.","title":"http.send"},{"location":"api-reference/#httpget-post-head-put-delete-patch-options","text":"http.get(url, [options]) -> Response Shortcut methods for http.send .","title":"http.get, post, head, put, delete, patch, options"},{"location":"api-reference/#httprequest","text":"http.Request(method, url, [options]) -> Request Creates and prepares a Request object.","title":"http.Request"},{"location":"api-reference/#attributes","text":"Note: These attributes are all read-only. Use the provided methods instead of setting them directly. method (string) - HTTP verb used for request url (string) - URL request is sent to headers (dictionary) - Headers used for this request query (dictionary) - Parameters to add to URL data (string) - Raw data sent with request","title":"Attributes"},{"location":"api-reference/#requestupdate_headers","text":"Request:update_headers(headers) Updates request headers based on a dictionary of new headers.","title":"Request:update_headers"},{"location":"api-reference/#requestupdate_query","text":"Request:update_query(params) Updates URL query string based on a dictionary of parameters.","title":"Request:update_query"},{"location":"api-reference/#requestset_data","text":"Request:set_data(data) Sets new data for request. The data can be a string, table (JSON), or FormData.","title":"Request:set_data"},{"location":"api-reference/#requestsend","text":"Request:send() -> Response Sends the request and returns a Response object. Request:send(cb) Sends request and passes the response to a callback function. This will not block the current thread.","title":"Request:send"},{"location":"api-reference/#response","text":"","title":"Response"},{"location":"api-reference/#attributes_1","text":"request (Request) - Request that generated this response url (string) - Requests' URL method (string) - Request's HTTP method success (bool) - true if response was successful code (number) - Status code of reponse message (string) - Status message of response headers (dictionary) - Headers sent in response content (string) - Response body cookies (CookieJar) - New cookies sent in this response","title":"Attributes"},{"location":"api-reference/#responsejson","text":"Response:json() -> Variant Converts JSON response to a Lua object.","title":"Response:json"},{"location":"api-reference/#httpsession","text":"http.Session([base_url]) -> Session Creates a session with an optional base URL. All main module methods also apply to sessions.","title":"http.Session"},{"location":"api-reference/#attributes_2","text":"headers (dictionary) - Default headers used with each request cookies (CookieJar) - Current session cookies. Updates automatically from Set-Cookie header base_url (string) - Base URL to prefix each request with. If a request UTL contains the HTTP protocol (\"http(s)://\"), this will be ignored","title":"Attributes"},{"location":"api-reference/#sessionset_headers","text":"Session:set_headers(new_headers) Updates headers dictionary with values of new_headers.","title":"Session:set_headers"},{"location":"api-reference/#sessionsend","text":"Session:send(method, url, [opts]) -> Response Creates and sends a request prepared with session defaults. Options specified here will override the session values.","title":"Session:send"},{"location":"api-reference/#sessionget-post-head-put-delete-patch-options","text":"Session:get(url, [opts]) -> Response Shortcut methods for Session:send","title":"Session:get, post, head, put, delete, patch, options"},{"location":"api-reference/#sessionrequest","text":"Session:Request(method, url, [opts]) -> Request Creates a Request prepared with session defaults. Options specified here will override the session values.","title":"Session:Request"},{"location":"api-reference/#httpformdata","text":"http.FormData([{fieldName, fieldValue}, [...]]) -> FormData Creates form data based on given fields. Field names cannot contain '=' or '&' characters.","title":"http.FormData"},{"location":"api-reference/#formdataaddfield","text":"FormData:AddField(name, value) Adds field with given name and value.","title":"FormData:AddField"},{"location":"api-reference/#formdataaddfile","text":"FormData:AddFile(fieldName, fileContent, [fileName, [contentType]]) Adds a file to the form with optional file name and content type. Content type must be specified if not text/plain . Any non-text files will be encoded using Base64.","title":"FormData:AddFile"},{"location":"api-reference/#httpcookiejar","text":"http.CookieJar() -> CookieJar Creates a CookieJar object. When cookies are added for a URL, its hostname is taken and used as the domain for that cookie (this is being reworked in the future).","title":"http.CookieJar"},{"location":"api-reference/#attributes_3","text":"domains (dictionary) - Table containing cookies for each domain","title":"Attributes"},{"location":"api-reference/#cookiejarset","text":"CookieJar:set(url, name, value) Creates a new cookie under the specified URL CookieJar:set(url, cookie_table) Adds multiple cookies to the specified URL. Table should be in the format {name=\"value\"} .","title":"CookieJar:set"},{"location":"api-reference/#cookiejardelete","text":"CookieJar:delete(url, name) Deletes a cookie from the specified domain.","title":"CookieJar:delete"},{"location":"guide/advanced/","text":"Advanced Usage This page covers some more advanced features of Roblox Requests. Session Objects The Session object allows you to persist certain data across requests. It also persists cookies across all requests made from the Session instance. A Session object has all the same methods of the main Requests API. Persisting cookies across requests: local session = http . Session () session : get ( \"https://httpbin.org/cookies/set/sessioncookie/123456789\" ) local r = session : get ( \"https://httpbin.org/cookies\" ) print ( r . content ) -- {\"cookies\": {\"sessioncookie\": \"123456789\"}} Sessions can also be used to provide default data to requests. This is done with some helper functions: local session = http . Session () session : set_headers {[ \"X-Test\" ] = \"true\" } -- both \"x-test\" and \"x-test2\" are sent session : get ( \"https://httpbin.org/headers\" , { headers = {[ \"X-Test2\" ] = \"true\" } }) Any options that you pass to a request method will be merged with the session-level values. Method-level parameters override session parameters. However, method-level parameters aren't persisted across requests, even if using a session. This example will only send cookies with the first request: local session = http . Session () local r = session : get ( \"https://httpbin.org/cookies\" , { cookies = {[ \"temp\" ] = \"value\" } }) print ( r . content ) -- {\"cookies\": {\"temp\": \"value\"}} local r2 = session : get ( \"https://httpbin.org/cookies\" ) print ( r2 . content ) -- {\"cookies\": {}} Request Objects When you send a request with the http.get() method, a Request object is actually created and prepared with any data you passed. In some cases, you may wish to do something extra with the request before it is sent. The following allows you to: local request = http . Request ( \"POST\" , \"https://httpbin.org/post\" , { data = data }) request : set_data ( \"use this body instead\" ) local response = request : send () Asynchronous Requests When handling Request objects directly, you can send them in a separate thread by specifying a callback: function cb ( response ) print ( response . content ) -- do stuff end local request = http . Request ( \"POST\" , \"https://httpbin.org/post\" ) request : send ( cb ) -- continue executing without waiting for response","title":"Advanced Usage"},{"location":"guide/advanced/#advanced-usage","text":"This page covers some more advanced features of Roblox Requests.","title":"Advanced Usage"},{"location":"guide/advanced/#session-objects","text":"The Session object allows you to persist certain data across requests. It also persists cookies across all requests made from the Session instance. A Session object has all the same methods of the main Requests API. Persisting cookies across requests: local session = http . Session () session : get ( \"https://httpbin.org/cookies/set/sessioncookie/123456789\" ) local r = session : get ( \"https://httpbin.org/cookies\" ) print ( r . content ) -- {\"cookies\": {\"sessioncookie\": \"123456789\"}} Sessions can also be used to provide default data to requests. This is done with some helper functions: local session = http . Session () session : set_headers {[ \"X-Test\" ] = \"true\" } -- both \"x-test\" and \"x-test2\" are sent session : get ( \"https://httpbin.org/headers\" , { headers = {[ \"X-Test2\" ] = \"true\" } }) Any options that you pass to a request method will be merged with the session-level values. Method-level parameters override session parameters. However, method-level parameters aren't persisted across requests, even if using a session. This example will only send cookies with the first request: local session = http . Session () local r = session : get ( \"https://httpbin.org/cookies\" , { cookies = {[ \"temp\" ] = \"value\" } }) print ( r . content ) -- {\"cookies\": {\"temp\": \"value\"}} local r2 = session : get ( \"https://httpbin.org/cookies\" ) print ( r2 . content ) -- {\"cookies\": {}}","title":"Session Objects"},{"location":"guide/advanced/#request-objects","text":"When you send a request with the http.get() method, a Request object is actually created and prepared with any data you passed. In some cases, you may wish to do something extra with the request before it is sent. The following allows you to: local request = http . Request ( \"POST\" , \"https://httpbin.org/post\" , { data = data }) request : set_data ( \"use this body instead\" ) local response = request : send ()","title":"Request Objects"},{"location":"guide/advanced/#asynchronous-requests","text":"When handling Request objects directly, you can send them in a separate thread by specifying a callback: function cb ( response ) print ( response . content ) -- do stuff end local request = http . Request ( \"POST\" , \"https://httpbin.org/post\" ) request : send ( cb ) -- continue executing without waiting for response","title":"Asynchronous Requests"},{"location":"guide/installation/","text":"There are two methods to get started with Roblox Requests. For our examples, Requests will be installed into ReplicatedStorage under the name http . In practice, you can place the library anywhere. Method 1: Model File Download the rbxmx model file from the repository Insert the model into Studio in a place like ReplicatedStorage Method 2: Filesystem Copy the http directory into your codebase Use a plugin like Rojo to sync the files into a place","title":"Installation"},{"location":"guide/installation/#method-1-model-file","text":"Download the rbxmx model file from the repository Insert the model into Studio in a place like ReplicatedStorage","title":"Method 1: Model File"},{"location":"guide/installation/#method-2-filesystem","text":"Copy the http directory into your codebase Use a plugin like Rojo to sync the files into a place","title":"Method 2: Filesystem"},{"location":"guide/quickstart/","text":"Quickstart This page gives an introduction into how to use Roblox Requests. From this point forward, we will assume that Requests is installed in ReplicatedStorage . Make a request Making a request is simple. We'll begin by obtaining the module: local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local http = require ( ReplicatedStorage . http ) Now, we'll make a GET request. local r = http . get ( \"https://api.github.com/events\" ) -- GitHub's public timeline This gives us a Response object containing the information we need. What about the other HTTP methods? local r = http . post ( \"https://httpbin.org/post\" , { data = { key = \"value\" } }) local r = http . put ( \"https://httpbin.org/put\" , { data = { key = \"value\" } }) local r = http . patch ( \"https://httpbin.org/patch\" , { data = { key = \"value\" } }) local r = http . delete ( \"https://httpbin.org/delete\" ) local r = http . head ( \"https://httpbin.org/head\" ) local r = http . options ( \"https://httpbin.org/options\" ) All methods accept an options dictionary for any additional information. Passing Parameters in URLs It's common to send data in a URL's query string. With HttpService, constructing key/value pairs in URLs gets very tedious. Requests allows you to provide these arguments as a dictionary using the query option. For example: local payload = { key1 = \"value1\" , key2 = \"value2\" } local r = http . get ( \"https://httpbin.org/get\" , { query = payload }) You can see the encoded URL by printing it: print ( r . url ) -- https://httpbin.org/get?key1=value1&key2=value2 Response Content Requests makes it easy to read different kinds of response content. local r = http . get ( \"https://api.github.com/orgs/Roblox/repos\" ) print ( r . content ) -- [{\"id\":10803524,\"node_id\":\"MDEwOlJlcG9zaXRvcnkxMD... The content attribute provides the plaintext response body, regardless of the given content-type. If you'd like to decode JSON data, you can use the :json() method: local r = http . get ( \"https://api.github.com/orgs/Roblox/repos\" ) local repos = r : json () print ( # repos ) -- 30 In the case that JSON decoding fails, an exception will be raised. It should be noted, however, that a successful :json() call does not indicate the success of the response. Some servers may return a JSON object in a failed response, such as error details. To check that a response is successful, use r.success or r.code . Custom Headers If you'd like to add HTTP headers, just pass a dictionary to the headers option. For example, API keys are often specified in the headers of a request: local url = \"https://api.github.com/some/endpoint\" local custom_headers = { Authorization = \"api-key-here\" } local r = http . get ( url , { headers = custom_headers }) Note: The User-Agent and Roblox-Id headers cannot be overridden. POST JSON Payloads It's common to send JSON data via HTTP. To do this, just pass a table to the data argument. It will be detected as JSON and automatically encoded when the request is made: local payload = { key1 = \"value1\" , list = { \"a\" , \"b\" , \"c\" }} local r = http . post ( \"https://httpbin.org/post\" , { data = payload }) print ( r . content ) -- { -- ... -- \"json\": { -- \"key1\": \"value1\", -- \"list\": [ -- \"a\", -- \"b\", -- \"c\" -- ] -- }, -- ... -- } POST Form Data Requests supports URL encoded and multipart encoded forms through the FormData class. Creating forms is simple: local form = http . FormData ({ \"key\" , \"value\" }, { \"key2\" , \"value2\" }, ...) Fields can also be added after the form is created: local form = http . FormData () form : AddField ( \"size\" , \"large\" ) form : AddField ( \"toppings\" , { \"cheese\" , \"pepperoni\" }) To use a form in a POST request, just set it as the data option: local form = http . FormData ({ \"key\" , \"value\" }, { \"key2\" , \"value2\" }) local r = http . post ( \"https://httpbin.org/post\" , { data = form }) print ( r . content ) -- { -- ... -- \"form\": { -- \"key\": \"value\", -- \"key2\": \"value2\" -- }, -- ... -- } File Uploads Requests makes it easy to upload files: local file_name = \"example.txt\" local file_content = \"Lorem ipsum\" local form = http . FormData () form : AddFile ( \"file\" , file_content , file_name ) local r = http . post ( \"https://api.anonymousfiles.io/\" , { data = form }) print ( r : json (). url ) -- https://anonymousfiles.io/et78xhGK/ Binary files can also be uploaded. This example downloads an image then uploads it to another site: local image_url = \"https://upload.wikimedia.org/wikipedia/en/a/a9/Example.jpg\" local image = http . get ( image_url ) local form = http . FormData () form : AddFile ( \"file\" , image . content , \"image.jpg\" , \"image/jpeg\" ) -- content type must be specified for non-text files local r = http . post ( \"https://api.anonymousfiles.io/\" , { data = form }) print ( r : json (). url ) -- https://anonymousfiles.io/zwtSGyvZ/ Any non-text files will be encoded using Base64 before upload. Response Status Codes We can check the response status code and message: local r = http . get ( \"https://httpbin.org/get\" ) print ( r . code , r . message ) -- 200 OK print ( r . success ) -- true All is well.","title":"Quickstart"},{"location":"guide/quickstart/#quickstart","text":"This page gives an introduction into how to use Roblox Requests. From this point forward, we will assume that Requests is installed in ReplicatedStorage .","title":"Quickstart"},{"location":"guide/quickstart/#make-a-request","text":"Making a request is simple. We'll begin by obtaining the module: local ReplicatedStorage = game : GetService ( \"ReplicatedStorage\" ) local http = require ( ReplicatedStorage . http ) Now, we'll make a GET request. local r = http . get ( \"https://api.github.com/events\" ) -- GitHub's public timeline This gives us a Response object containing the information we need. What about the other HTTP methods? local r = http . post ( \"https://httpbin.org/post\" , { data = { key = \"value\" } }) local r = http . put ( \"https://httpbin.org/put\" , { data = { key = \"value\" } }) local r = http . patch ( \"https://httpbin.org/patch\" , { data = { key = \"value\" } }) local r = http . delete ( \"https://httpbin.org/delete\" ) local r = http . head ( \"https://httpbin.org/head\" ) local r = http . options ( \"https://httpbin.org/options\" ) All methods accept an options dictionary for any additional information.","title":"Make a request"},{"location":"guide/quickstart/#passing-parameters-in-urls","text":"It's common to send data in a URL's query string. With HttpService, constructing key/value pairs in URLs gets very tedious. Requests allows you to provide these arguments as a dictionary using the query option. For example: local payload = { key1 = \"value1\" , key2 = \"value2\" } local r = http . get ( \"https://httpbin.org/get\" , { query = payload }) You can see the encoded URL by printing it: print ( r . url ) -- https://httpbin.org/get?key1=value1&key2=value2","title":"Passing Parameters in URLs"},{"location":"guide/quickstart/#response-content","text":"Requests makes it easy to read different kinds of response content. local r = http . get ( \"https://api.github.com/orgs/Roblox/repos\" ) print ( r . content ) -- [{\"id\":10803524,\"node_id\":\"MDEwOlJlcG9zaXRvcnkxMD... The content attribute provides the plaintext response body, regardless of the given content-type. If you'd like to decode JSON data, you can use the :json() method: local r = http . get ( \"https://api.github.com/orgs/Roblox/repos\" ) local repos = r : json () print ( # repos ) -- 30 In the case that JSON decoding fails, an exception will be raised. It should be noted, however, that a successful :json() call does not indicate the success of the response. Some servers may return a JSON object in a failed response, such as error details. To check that a response is successful, use r.success or r.code .","title":"Response Content"},{"location":"guide/quickstart/#custom-headers","text":"If you'd like to add HTTP headers, just pass a dictionary to the headers option. For example, API keys are often specified in the headers of a request: local url = \"https://api.github.com/some/endpoint\" local custom_headers = { Authorization = \"api-key-here\" } local r = http . get ( url , { headers = custom_headers }) Note: The User-Agent and Roblox-Id headers cannot be overridden.","title":"Custom Headers"},{"location":"guide/quickstart/#post-json-payloads","text":"It's common to send JSON data via HTTP. To do this, just pass a table to the data argument. It will be detected as JSON and automatically encoded when the request is made: local payload = { key1 = \"value1\" , list = { \"a\" , \"b\" , \"c\" }} local r = http . post ( \"https://httpbin.org/post\" , { data = payload }) print ( r . content ) -- { -- ... -- \"json\": { -- \"key1\": \"value1\", -- \"list\": [ -- \"a\", -- \"b\", -- \"c\" -- ] -- }, -- ... -- }","title":"POST JSON Payloads"},{"location":"guide/quickstart/#post-form-data","text":"Requests supports URL encoded and multipart encoded forms through the FormData class. Creating forms is simple: local form = http . FormData ({ \"key\" , \"value\" }, { \"key2\" , \"value2\" }, ...) Fields can also be added after the form is created: local form = http . FormData () form : AddField ( \"size\" , \"large\" ) form : AddField ( \"toppings\" , { \"cheese\" , \"pepperoni\" }) To use a form in a POST request, just set it as the data option: local form = http . FormData ({ \"key\" , \"value\" }, { \"key2\" , \"value2\" }) local r = http . post ( \"https://httpbin.org/post\" , { data = form }) print ( r . content ) -- { -- ... -- \"form\": { -- \"key\": \"value\", -- \"key2\": \"value2\" -- }, -- ... -- }","title":"POST Form Data"},{"location":"guide/quickstart/#file-uploads","text":"Requests makes it easy to upload files: local file_name = \"example.txt\" local file_content = \"Lorem ipsum\" local form = http . FormData () form : AddFile ( \"file\" , file_content , file_name ) local r = http . post ( \"https://api.anonymousfiles.io/\" , { data = form }) print ( r : json (). url ) -- https://anonymousfiles.io/et78xhGK/ Binary files can also be uploaded. This example downloads an image then uploads it to another site: local image_url = \"https://upload.wikimedia.org/wikipedia/en/a/a9/Example.jpg\" local image = http . get ( image_url ) local form = http . FormData () form : AddFile ( \"file\" , image . content , \"image.jpg\" , \"image/jpeg\" ) -- content type must be specified for non-text files local r = http . post ( \"https://api.anonymousfiles.io/\" , { data = form }) print ( r : json (). url ) -- https://anonymousfiles.io/zwtSGyvZ/ Any non-text files will be encoded using Base64 before upload.","title":"File Uploads"},{"location":"guide/quickstart/#response-status-codes","text":"We can check the response status code and message: local r = http . get ( \"https://httpbin.org/get\" ) print ( r . code , r . message ) -- 200 OK print ( r . success ) -- true All is well.","title":"Response Status Codes"}]}